diff --git a/Gemfile.lock b/Gemfile.lock
index 170e13d..1ddcb47 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -1,6 +1,6 @@
 GIT
   remote: https://github.com/18F/identity-proofer-gem.git
-  revision: 3b44d294c9f12c4fb7ab89687f48d3453f8582a7
+  revision: d013230ddeba07d6f37a58c06351218bb5f525fe
   branch: master
   specs:
     proofer (1.0.0)
diff --git a/app/controllers/concerns/idv_session.rb b/app/controllers/concerns/idv_session.rb
index afc9125..39b139a 100644
--- a/app/controllers/concerns/idv_session.rb
+++ b/app/controllers/concerns/idv_session.rb
@@ -25,9 +25,7 @@ module IdvSession
   def proofing_session_started?
     idv_resolution.present? &&
       idv_applicant.present? &&
-      idv_resolution.success &&
-      idv_questions &&
-      idv_questions.any?
+      idv_resolution.success?
   end
 
   def idv_vendor=(vendor)
diff --git a/app/controllers/idv/confirmations_controller.rb b/app/controllers/idv/confirmations_controller.rb
index 599e36c..e6fea3d 100644
--- a/app/controllers/idv/confirmations_controller.rb
+++ b/app/controllers/idv/confirmations_controller.rb
@@ -6,10 +6,10 @@ module Idv
 
     def index
       if proofing_session_started?
-        if idv_question_number >= idv_resolution.questions.count
-          submit_answers
+        if idv_questions && idv_questions.count
+          handle_kbv
         else
-          redirect_to idv_questions_path
+          handle_without_kbv
         end
       else
         redirect_to idv_sessions_path
@@ -18,6 +18,24 @@ module Idv
 
     private
 
+    def handle_kbv
+      if idv_question_number >= idv_resolution.questions.count
+        submit_answers
+      else
+        redirect_to idv_questions_path
+      end
+    end
+
+    def handle_without_kbv
+      # should we do further interrogate idv_resolution?
+      # see https://github.com/18F/identity-private/issues/485
+      if idv_resolution.success?
+        finish_proofing_success
+      else
+        finish_proofing_failure
+      end
+    end
+
     def submit_answers
       agent = Proofer::Agent.new(vendor: idv_vendor, applicant: idv_applicant)
       @idv_vendor = idv_vendor
diff --git a/app/controllers/idv/questions_controller.rb b/app/controllers/idv/questions_controller.rb
index 2f0910c..e73e4b5 100644
--- a/app/controllers/idv/questions_controller.rb
+++ b/app/controllers/idv/questions_controller.rb
@@ -22,7 +22,7 @@ module Idv
 
     def render_next_question
       questions = idv_resolution.questions
-      if idv_question_number < questions.count
+      if questions && idv_question_number < questions.count
         @question_sequence = idv_question_number + 1
         @question = questions[idv_question_number]
       else
diff --git a/app/controllers/idv/sessions_controller.rb b/app/controllers/idv/sessions_controller.rb
index 5cb1fc9..0196ebb 100644
--- a/app/controllers/idv/sessions_controller.rb
+++ b/app/controllers/idv/sessions_controller.rb
@@ -21,7 +21,10 @@ module Idv
     private
 
     def start_idv_session
-      agent = Proofer::Agent.new(vendor: pick_a_vendor)
+      agent = Proofer::Agent.new(
+        vendor: pick_a_vendor,
+        kbv: FeatureManagement.proofing_requires_kbv?
+      )
       self.idv_applicant = applicant_from_params
       self.idv_vendor = agent.vendor
       agent.start(idv_applicant)
diff --git a/config/application.yml.example b/config/application.yml.example
index 1a9b29d..d03ac5b 100644
--- a/config/application.yml.example
+++ b/config/application.yml.example
@@ -18,13 +18,14 @@ development:
   logins_per_ip_limit: '20'
   logins_per_ip_period: '8'
   newrelic_license_key: 'xxx'
+  proofing_kbv: 'true'
+  proofing_vendors: 'mock'
   requests_per_ip_limit: '300'
   requests_per_ip_period: '300'
   sms_disabled: 'true'
   saml_passphrase: 'trust-but-verify'
   secret_key_base: 'development_secret_key_base'
   twilio_accounts: '[{"sid":"sid", "auth_token":"token", "number":"9999999999"}]'
-  proofing_vendors: 'mock'
 
 production:
   allow_third_party_auth: 'yes'
@@ -52,9 +53,10 @@ test:
   logins_per_ip_limit: '2'
   logins_per_ip_period: '2'
   newrelic_license_key: 'xxx'
+  proofing_kbv: 'true'
+  proofing_vendors: 'mock'
   requests_per_ip_limit: '3'
   requests_per_ip_period: '60'
   saml_passphrase: 'trust-but-verify'
   secret_key_base: 'test_secret_key_base'
   twilio_accounts: '[{"sid":"sid1", "auth_token":"token1", "number":"9999999999"}, {"sid":"sid2", "auth_token":"token2", "number":"2222222222"}]'
-  proofing_vendors: 'mock'
diff --git a/lib/feature_management.rb b/lib/feature_management.rb
index 30830b8..c9cdc7b 100644
--- a/lib/feature_management.rb
+++ b/lib/feature_management.rb
@@ -12,4 +12,8 @@ class FeatureManagement
     # developers can log in without needing to configure SMS delivery.
     Rails.env.development? && FeatureManagement.sms_disabled?
   end
+
+  def self.proofing_requires_kbv?
+    Figaro.env.proofing_kbv != 'false'
+  end
 end
diff --git a/spec/controllers/idv/sessions_controller_spec.rb b/spec/controllers/idv/sessions_controller_spec.rb
index 37d58cf..e94513d 100644
--- a/spec/controllers/idv/sessions_controller_spec.rb
+++ b/spec/controllers/idv/sessions_controller_spec.rb
@@ -32,26 +32,60 @@ describe Idv::SessionsController do
       sign_in(user)
     end
 
-    it 'starts new proofing session' do
-      get :index
+    context 'KBV on' do
+      before do
+        ENV['PROOFING_KBV'] = 'true'
+      end
 
-      expect(response.status).to eq 200
-      expect(response.body).to include t('idv.form.first_name')
-    end
+      after do
+        ENV['PROOFING_KBV'] = Figaro.env.proofing_kbv
+      end
+
+      it 'recognizes KBV is on' do
+        expect(FeatureManagement.proofing_requires_kbv?).to eq true
+      end
+
+      it 'starts new proofing session' do
+        get :index
+
+        expect(response.status).to eq 200
+        expect(response.body).to include t('idv.form.first_name')
+      end
+
+      it 'creates proofing applicant' do
+        post :create, user_attrs
 
-    it 'creates proofing applicant' do
-      post :create, user_attrs
+        expect(flash).to be_empty
+        expect(response).to redirect_to(idv_questions_path)
+        expect(subject.user_session[:idv][:applicant]).to be_a Proofer::Applicant
+      end
 
-      expect(flash).to be_empty
-      expect(response).to redirect_to(idv_questions_path)
-      expect(subject.user_session[:idv][:applicant]).to be_a Proofer::Applicant
+      it 'shows failure on intentionally bad values' do
+        post :create, first_name: 'Bad', ssn: '6666'
+
+        expect(response).to redirect_to(idv_sessions_path)
+        expect(flash[:error]).to eq t('idv.titles.fail')
+      end
     end
 
-    it 'shows failure on intentionally bad values' do
-      post :create, first_name: 'Bad', ssn: '6666'
+    context 'KBV off' do
+      before do
+        ENV['PROOFING_KBV'] = 'false'
+      end
+
+      after do
+        ENV['PROOFING_KBV'] = Figaro.env.proofing_kbv
+      end
+
+      it 'recognizes KBV is off' do
+        expect(FeatureManagement.proofing_requires_kbv?).to eq false
+      end
+
+      it 'skips questions creation' do
+        post :create, user_attrs
 
-      expect(response).to redirect_to(idv_sessions_path)
-      expect(flash[:error]).to eq t('idv.titles.fail')
+        expect(subject.user_session[:idv][:resolution].questions).to be_nil
+      end
     end
   end
 end
diff --git a/spec/features/idv/question_cycle_spec.rb b/spec/features/idv/question_cycle_spec.rb
index 903cac0..69090fa 100644
--- a/spec/features/idv/question_cycle_spec.rb
+++ b/spec/features/idv/question_cycle_spec.rb
@@ -3,51 +3,84 @@ require 'rails_helper'
 feature 'IdV session' do
   include IdvHelper
 
-  scenario 'KBV with all answers correct' do
-    user = sign_in_and_2fa_user
+  context 'KBV off' do
+    before do
+      ENV['PROOFING_KBV'] = 'false'
+    end
 
-    visit '/idv/sessions'
+    after do
+      ENV['PROOFING_KBV'] = Figaro.env.proofing_kbv
+    end
 
-    expect(page).to have_content(t('idv.form.first_name'))
+    scenario 'skips KBV' do
+      user = sign_in_and_2fa_user
 
-    fill_out_idv_form_ok
-    click_button 'Continue'
-    expect(page).to have_content('Where did you live')
+      visit '/idv/sessions'
 
-    complete_idv_questions_ok
-    expect(page).to have_content(t('idv.titles.complete'))
+      expect(page).to have_content(t('idv.form.first_name'))
 
-    expect(user.active_profile).to be_a(Profile)
-    expect(user.active_profile.verified?).to eq true
-    expect(user.active_profile.ssn).to eq '666661234'
+      fill_out_idv_form_ok
+      click_button 'Continue'
+      expect(page).to have_content(t('idv.titles.complete'))
+      expect(user.active_profile).to be_a(Profile)
+    end
   end
 
-  scenario 'KBV with some incorrect answers' do
-    sign_in_and_2fa_user
+  context 'KBV on' do
+    before do
+      ENV['PROOFING_KBV'] = 'true'
+    end
 
-    visit '/idv/sessions'
+    after do
+      ENV['PROOFING_KBV'] = Figaro.env.proofing_kbv
+    end
 
-    expect(page).to have_content(t('idv.form.first_name'))
+    scenario 'KBV with all answers correct' do
+      user = sign_in_and_2fa_user
 
-    fill_out_idv_form_ok
-    click_button 'Continue'
+      visit '/idv/sessions'
 
-    expect(page).to have_content('Where did you live')
+      expect(page).to have_content(t('idv.form.first_name'))
 
-    complete_idv_questions_fail
-    expect(page).to have_content(t('idv.titles.hardfail'))
-  end
+      fill_out_idv_form_ok
+      click_button 'Continue'
+      expect(page).to have_content('Where did you live')
+
+      complete_idv_questions_ok
+      expect(page).to have_content(t('idv.titles.complete'))
+
+      expect(user.active_profile).to be_a(Profile)
+      expect(user.active_profile.verified?).to eq true
+      expect(user.active_profile.ssn).to eq '666661234'
+    end
+
+    scenario 'KBV with some incorrect answers' do
+      sign_in_and_2fa_user
+
+      visit '/idv/sessions'
+
+      expect(page).to have_content(t('idv.form.first_name'))
+
+      fill_out_idv_form_ok
+      click_button 'Continue'
+
+      expect(page).to have_content('Where did you live')
+
+      complete_idv_questions_fail
+      expect(page).to have_content(t('idv.titles.hardfail'))
+    end
 
-  scenario 'un-resolvable PII' do
-    sign_in_and_2fa_user
+    scenario 'un-resolvable PII' do
+      sign_in_and_2fa_user
 
-    visit '/idv/sessions'
+      visit '/idv/sessions'
 
-    expect(page).to have_content(t('idv.form.first_name'))
+      expect(page).to have_content(t('idv.form.first_name'))
 
-    fill_out_idv_form_fail
-    click_button 'Continue'
+      fill_out_idv_form_fail
+      click_button 'Continue'
 
-    expect(page).to have_content(t('idv.titles.fail'))
+      expect(page).to have_content(t('idv.titles.fail'))
+    end
   end
 end

