#!/usr/bin/env ruby
require 'pathname'

# path to your application root.
APP_ROOT = Pathname.new File.expand_path("../../",  __FILE__)

def run(command)
  abort "command failed (#{$?}): #{command}" unless system command
end

Dir.chdir APP_ROOT do
  # This script is a starting point to setup your application.
  # Add necessary setup steps to this file:

  puts %q[
   _             _
  | |           (_)
  | | ___   __ _ _ _ __    __ _  _____   __
  | |/ _ \ / _` | | '_ \  / _` |/ _ \ \ / /
  | | (_) | (_| | | | | || (_| | (_) \ V /
  |_|\___/ \__, |_|_| |_(_)__, |\___/ \_/
            __/ |          __/ |
           |___/          |___/
  ]

  # This file is intended to run after `docker-compose up`
  #  it runs commands that won't work at build time and therefore must be executed at runtime.

  # The app dir is mounted as a volume, so new files also appear in the container.
  #  files copied during build can be overwritten by the mounted Volume.
  puts "== Copying necessary configuration files"
  run "cp config/application.yml.default config/application.yml"
  run "cp -R certs.example certs"
  run "cp -R keys.example keys"
  run "cp pwned_passwords/pwned_passwords.txt.sample pwned_passwords/pwned_passwords.txt"
  run "cp config/service_providers.localdev.yml config/service_providers.yml"

  # These take a long time because we spin up containers for each command, could be better.
  puts "== Creating migrating databases =="
  run "docker-compose run --rm web rake db:create"
  # The following pattern prevents a database reset from happening in prod.
  run "docker-compose run --rm web rake db:environment:set"
  run "docker-compose run --rm web rake db:reset"
  run "docker-compose run --rm web rake db:environment:set"
  # This populates the dev database with sample data
  run "docker-compose run --rm web rake dev:prime"

end
