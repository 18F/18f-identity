#!/bin/bash
set -euo pipefail

params=""
spec_helper="rails_helper"
should_source_env=1
retry_count=0

function help() {
  cat <<EOS
Usage: $0 [--local|--remote] [FILES...]
   --local          (default) Run the tests against local rails server
   --remote         Run the tests against remote servers
   --no-source-env  Do not source .env file for environment variables (this is used in CI)
   --help           Print this help message
   --retry-count    Number of times to retry failures (default: $retry_count)
EOS
}

while (( "$#" )); do
  case "$1" in
    --local)
      spec_helper="rails_helper"
      shift
      ;;
    --remote)
      spec_helper="monitor_spec_helper"
      shift
      ;;
    --no-source-env)
      should_source_env=0
      shift
      ;;
    --retry-count)
      retry_count="$2"
      shift 2
      ;;
    --help|-h)
      help
      exit 0
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      params="$params $1"
      shift
      ;;
  esac
done

# set positional arguments in their proper place
eval set -- "${params// }"

if [[ "$spec_helper" == "monitor_spec_helper" && "$should_source_env" -eq 1 ]]; then
  set -o allexport
  echo "source .env" >&2
  source .env
  set +o allexport
fi

function print_then_run() {
  cmd="$1"
  echo "$cmd" >&2
  $cmd
}

set +e
rspec="bundle exec rspec --require ${spec_helper} ${params:-"spec/features/monitor/"}"
print_then_run "$rspec"
test_status=$?

while [[ "$test_status" -ne 0 && "$retry_count" -gt 0 ]]; do
  echo "retrying... ($retry_count left)"
  let retry_count-=1
  print_then_run "$rspec --only-failure"
  test_status=$?
done
set -e

exit "$test_status"
