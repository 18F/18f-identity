#!/usr/bin/env ruby
require 'pathname'
require 'yaml'

if ENV.has_key?('APP_NAME')
  APP_NAME = ENV['APP_NAME'].freeze
else
  APP_NAME = 'login-dot-gov-test'.freeze
end

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../', __FILE__)

APP_VARS = 'config/application_cloud_dot_gov.yml'

def run(command)
  abort "command failed (#{$CHILD_STATUS}): #{command}" unless system command
end

def config_error(exception = nil)
  puts exception.message if exception
  raise "\n\nERROR!\n   Configuration for cloud.gov missing!\n" \
        "   Make sure #{APP_VARS} exists\n"
end

puts '
  adding cloud.gov power to login.gov...


                  `:-
               `-+ssss/.
            `-+ssssssssso/.
         `./ssssssssssssssso:`
       ./osssssssssossssssssss+-`
     -ossssssssssss`/ssssssssssss+
     +dhyyssssssss: `osssssssyyhdd`
     +ddddhs+++++/   .+++++oyhdddd`
     +ddddddy/.         `-ohdddddd`
     +ddddddddhs`      :yddddddddd`
     +ddddddddds   .`  -dddddddddd`
     +ddddddddh.`:shy+- +ddddddddd`
     +ddddddddsohddddddy+ddddddddd`
     :ydddddddddddddddddddddddddds
      `-ohdddddddddddddddddddds/.
         `:ohddddddddddddddy+.
            `:sdddddddddh+.`
               `/ydddho-`
                  ./:`


'

Dir.chdir APP_ROOT do
  puts 'Checking for CF CLI...'
  cf_ver_string = `cf --version`
  cf_ver_num = cf_ver_string.split(' ')[2][0..3].to_f
  raise "\n\nERROR!\n.  Incompatible CF CLI version!\n" \
        "   Please update to >= 6.32\n\n" if cf_ver_num < 6.32

  puts "Checking for cloud.gov configuration in #{APP_VARS}..."
  begin
    app_config = YAML.load_file(APP_VARS)
  rescue StandardError => e
    config_error(e)
  end
  # one more check to see if hash is populated...
  config_error if app_config.nil? || app_config.empty?

  # XXX - Why did we do this locally? -Paul
  # puts 'Vendoring dependencies...'
  # run 'bundle package --all'

  if system 'cf service redis'
    puts 'Redis service already present'
  else
    # Just a little redis for test
    puts 'Creating Redis service...'
    run 'cf create-service redis32 micro redis'
  end

  if system 'cf service postgres'
    puts 'PostgreSQL service already present'
  else
    puts 'Creating PostgreSQL service...'
    run 'cf create-service aws-rds shared-psql postgres'
  end

  puts 'Pushing app with --no-start...'
  run "cf push #{APP_NAME} --no-start -f manifest-app.yml --vars-file #{APP_VARS}"

  puts 'Starting app...'
  run "cf start #{APP_NAME}"
end
